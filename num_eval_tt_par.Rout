
R version 4.0.0 (2020-04-24) -- "Arbor Day"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(MASS)
> library(microbenchmark)
> library(foreach)
> library(Matrix)
> library(chebpol)
> library(pcaPP)
> library(doFuture)
Loading required package: future
> 
> load("/scratch/user/sharkmanhmz/latentcor_evaluation_git/latentcor_evaluation/TT_grid.rda")
> source("/scratch/user/sharkmanhmz/latentcor_git/latentcor/R/bridge.R")
> source("/scratch/user/sharkmanhmz/latentcor_git/latentcor/R/KendallTau.R")
> source("/scratch/user/sharkmanhmz/latentcor_git/latentcor/R/fromKtoR.R")
> source("/scratch/user/sharkmanhmz/latentcor_git/latentcor/R/estimateR.R")
> 
> # setup for 100 replication.
> nrep <- 100
> # sample size
> n <- 100
> # will test 19 latent r and 9 zero proportion values.
> latentRseq <- seq(-0.9, 0.9, by = 0.1)
> zratioseq <- seq(0.1, 0.9, by = 0.1)
> ##### check six cases of TC, TT, BC, BB, TB, NC
> type1 <- "trunc"; type2 <- "trunc"
> # the computation results will be saved
> 
> registerDoFuture()
> plan(multicore, workers = 80)
> 
> TT_eval <-
+ foreach (trueR = 1:length(latentRseq)) %:%
+   foreach (zrate = 1:length(zratioseq), .combine = rbind) %dopar% {
+     # initialize for every combination
+     time_org <- time_ml <- time_mlbd <- Kcor_org <- Kcor_ml <- Kcor_mlbd <- AE <- rep(NA, nrep)
+     set.seed(123)
+     for(i in 1:nrep){
+       # generate bivariate normal
+       z <- MASS::mvrnorm(n, mu = c(0, 0), Sigma = matrix(c(1, latentRseq[trueR], latentRseq[trueR], 1), nrow=2))
+       z1shift <- quantile(z[, 1], zratioseq[zrate]) # shifting to control the truncation levels
+       z2shift <- quantile(z[, 2], zratioseq[zrate]/2) # shifting half of zrate to control the truncation rate of 2nd variable as half trucation level of the first variable.
+       z1 <- z[, 1] - z1shift
+       z2 <- z[, 2] - z2shift
+       # truncation first and second variables.
+       u1 <- ifelse(z1 > 0, z1, 0)
+       u2 <- ifelse(z2 > 0, z2, 0)
+       # didn't apply any transformation.
+       x1 <- u1
+       x2 <- u2
+       time_org[i] <- median(microbenchmark::microbenchmark(Kcor_org[i] <- estimateR_mixed(X1 = x1, X2 = x2, type1 = type1, type2 = type2, method = "original")$R12, times = 5, unit = "ms")$time)
+       time_ml[i] <- median(microbenchmark::microbenchmark(Kcor_ml[i] <- estimateR_mixed(X1 = x1, X2 = x2, type1 = type1, type2 = type2, method = "ml")$R12, times = 5, unit = "ms")$time)
+       time_mlbd[i] <- median(microbenchmark::microbenchmark(Kcor_mlbd[i] <- estimateR_mixed(X1 = x1, X2 = x2, type1 = type1, type2 = type2, method = "approx")$R12, times= 5, unit = "ms")$time)
+     }
+     AE <- abs(cbind(Kcor_org - latentRseq[trueR], Kcor_ml - latentRseq[trueR], Kcor_mlbd - latentRseq[trueR], Kcor_ml - Kcor_org, Kcor_mlbd - Kcor_org))
+     TT_eval <- c(median(time_org), median(time_ml), median(time_mlbd), colMeans(AE), apply(AE, 2, max))
+   }
There were 50 or more warnings (use warnings() to see the first 50)
> 
> TT_eval_3d <- array(NA, c(length(latentRseq), length(zratioseq), 13))
> for (j in 1:length(latentRseq)) {
+   TT_eval_3d[j, , ] = TT_eval[[j]]
+ }
> save(TT_eval_3d, file = "TT_eval.rda")
> 
> proc.time()
     user    system   elapsed 
13172.949  2960.257   305.338 
